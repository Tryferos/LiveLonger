name: "Build"

on: 
  push: 
    branches:
      - main
    paths:
      - 'app/android/app/build.gradle'
  pull_request:
    branches:
      - main
    paths:
      - 'app/android/app/build.gradle'

jobs:
  build:
    name: Build App Bundle
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Java
        uses: actions/setup-java@v3.12.0
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Setup Nodejs
        uses: actions/setup-node@v4
        with: 
          node-version: '22.9.0'

      - name: Clean up old node_modules
        run: |
          rm -rf app/node_modules
          rm -f app/package-lock.json

      - name: Install Dependencies
        run: npm install --prefix app

      - name: Check if cli-platform-android exists
        run: ls -la app/node_modules/@react-native-community/cli-platform-android/

      - name: Decode Keystore
        run: echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > app/android/app/release-keystore.jks

      - name: Create key.properties
        run: |
          echo "storePassword=${{ secrets.KEYSTORE_PASSWORD }}" > app/android/key.properties
          echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> app/android/key.properties
          echo "keyAlias=${{ secrets.KEY_ALIAS }}" >> app/android/key.properties
          echo "storeFile=release-keystore.jks" >> app/android/key.properties

      - name: Decode google-services.json
        run: echo "${{ secrets.GOOGLE_SERVICES_JSON_BASE64 }}" | base64 --decode > app/android/app/google-services.json

      - name: Build APK
        run: npm run build-android --prefix app

      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: Releases
          path: app/android/app/build/outputs/bundle/app-release.aab

      - name: Find Version
        id: extract-version
        run: |
          version=$(grep "versionCode" app/android/app/build.gradle | sed 's/^[ \t]*//' | cut -d  ' ' -f 2)
          echo "VERSION=$version" >> $GITHUB_ENV

      - name: Check if Tag Exists
        id: check_tag
        run: |
          if git rev-parse "v${{ env.VERSION }}" >/dev/null 2>&1; then
            echo "TAG_EXISTS=true" >> $GITHUB_ENV
          else
            echo "TAG_EXISTS=false" >> $GITHUB_ENV
          fi

      - name: Modify Tag
        if: env.TAG_EXISTS == 'true'
        id: modify_tag
        run: |
          new_version="${{ env.VERSION }}-build-${{ github.run_number }}"
          echo "VERSION=$new_version" >> $GITHUB_ENV

      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "app/android/app/build/outputs/bundle/release/app-release.aab"
          tag: v${{ env.VERSION }}
          token: ${{ secrets.TOKEN }}
        